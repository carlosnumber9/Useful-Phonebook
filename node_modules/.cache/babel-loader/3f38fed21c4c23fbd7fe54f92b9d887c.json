{"remainingRequest":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\babel-loader\\lib\\index.js!D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\src\\components\\ContactList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\src\\components\\ContactList.vue","mtime":1572548421348},{"path":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Documentos\\Drive\\Trabajo\\workspaces\\Email Meter code test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\Documentos\\\\Drive\\\\Trabajo\\\\workspaces\\\\Email Meter code test\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport randomGenerator from 'random-profile-generator';\nimport ContactContainer from \"../fragments/ContactContainer\";\nvar JSON_SERVER_ADDRESS = 'http://localhost:8000';\nvar DEFAULT_CONTACT_LIST_SIZE = 5;\nvar DEFAULT_ITEMS_PER_PAGE = Math.abs(Math.random() * (0 - 10));\nexport default {\n  name: 'ContactList',\n  components: {\n    ContactContainer: ContactContainer\n  },\n  data: function data() {\n    return {\n      contacts: []\n    };\n  },\n  methods: {\n    generateRandomUsers: function generateRandomUsers() {\n      var i;\n      var randomUsers = [];\n      var listSize = Math.abs(Math.random() * (0 - 5));\n\n      for (i = 0; i < listSize; i++) {\n        randomUsers.push(randomGenerator.profile());\n      }\n\n      return randomUsers;\n    },\n    clearDatabase: function () {\n      var _clearDatabase = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(JSON_SERVER_ADDRESS + '/contacts').then(function (response) {\n                  return response.data.map(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee(contact) {\n                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return axios.delete(JSON_SERVER_ADDRESS + '/contacts/' + contact.id);\n\n                            case 2:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }());\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function clearDatabase() {\n        return _clearDatabase.apply(this, arguments);\n      }\n\n      return clearDatabase;\n    }(),\n    addToDatabase: function addToDatabase(newContacts) {\n      newContacts.map(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(newContact) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return axios.post(JSON_SERVER_ADDRESS + '/contacts', newContact);\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    getContacts: function () {\n      var _getContacts = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var dbData;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get(JSON_SERVER_ADDRESS + '/contacts').then(function (response) {\n                  return dbData = response.data;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", dbData);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getContacts() {\n        return _getContacts.apply(this, arguments);\n      }\n\n      return getContacts;\n    }(),\n    init: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.clearDatabase();\n\n              case 2:\n                this.contacts = this.generateRandomUsers();\n                _context5.next = 5;\n                return this.addToDatabase(this.contacts);\n\n              case 5:\n                this.totalPages = this.contacts.length > DEFAULT_ITEMS_PER_PAGE ? Math.ceil(this.contacts.length / DEFAULT_ITEMS_PER_PAGE) : 1;\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee6() {\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getContacts();\n\n            case 2:\n              this.contacts = _context6.sent;\n              this.totalPages = this.contacts.length > DEFAULT_ITEMS_PER_PAGE ? Math.ceil(this.contacts.length / DEFAULT_ITEMS_PER_PAGE) : 1;\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }()\n};",{"version":3,"sources":["ContactList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<div class=\"list\">\r\n    <p class=\"more-info\"> Click on a contact to see more info. </p>\r\n    <ul>\r\n        <!-- eslint-disable-next-line -->\r\n        <li v-for=\"contact in contacts\">\r\n            <router-link :to=\"{ name: 'contact', params: {id: contact.id } }\">\r\n                <contactContainer v-bind:contact=\"contact\"> </contactContainer>\r\n            </router-link>\r\n            <div class=\"new-contact-form\">\r\n\r\n            </div>\r\n        </li>\r\n    </ul>\r\n    <div class=\"buttons\">\r\n        <a class=\"button\" @click=\"init\"> Generate new random contacts </a>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport randomGenerator from 'random-profile-generator';\r\nimport ContactContainer from '../fragments/ContactContainer';\r\n\r\nconst JSON_SERVER_ADDRESS = 'http://localhost:8000';\r\nconst DEFAULT_CONTACT_LIST_SIZE = 5;\r\nconst DEFAULT_ITEMS_PER_PAGE = Math.abs(Math.random() * (0 - 10));\r\n\r\nexport default {\r\n    name: 'ContactList',\r\n    components: {\r\n        ContactContainer\r\n    },\r\n    data() {\r\n        return {\r\n            contacts: []\r\n        }\r\n    },\r\n    methods: {\r\n        generateRandomUsers() {\r\n            var i;\r\n            var randomUsers = [];\r\n            const listSize = Math.abs(Math.random() * (0 - 5));\r\n            for (i = 0; i < listSize; i++) {\r\n                randomUsers.push(randomGenerator.profile());\r\n            }\r\n            return randomUsers;\r\n        },\r\n        async clearDatabase() {\r\n            await axios.get(JSON_SERVER_ADDRESS + '/contacts')\r\n                .then(response => response.data.map(async contact => {\r\n                    await axios.delete(JSON_SERVER_ADDRESS + '/contacts/' + contact.id);\r\n                }));\r\n        },\r\n        addToDatabase(newContacts) {\r\n            newContacts.map(async newContact => {\r\n                await axios.post(JSON_SERVER_ADDRESS + '/contacts', newContact);\r\n            });\r\n        },\r\n        async getContacts() {\r\n            var dbData;\r\n            await axios.get(JSON_SERVER_ADDRESS + '/contacts')\r\n                .then(response => dbData = response.data);\r\n            return dbData;\r\n        },\r\n        async init() {\r\n            await this.clearDatabase();\r\n            this.contacts = this.generateRandomUsers();\r\n            await this.addToDatabase(this.contacts);\r\n            this.totalPages = (this.contacts.length > DEFAULT_ITEMS_PER_PAGE) ?\r\n                Math.ceil(this.contacts.length / DEFAULT_ITEMS_PER_PAGE) :\r\n                1;\r\n        }\r\n    },\r\n    created: async function () {\r\n        this.contacts = await this.getContacts();\r\n        this.totalPages = (this.contacts.length > DEFAULT_ITEMS_PER_PAGE) ?\r\n            Math.ceil(this.contacts.length / DEFAULT_ITEMS_PER_PAGE) :\r\n            1;\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh3 {\r\n    margin: 40px 0 0;\r\n}\r\n\r\nul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n}\r\n\r\nli {\r\n    margin: 0 10px;\r\n}\r\n\r\na {\r\n    color: #42b983;\r\n}\r\n\r\n.list:hover>.more-info {\r\n    opacity: 1;\r\n    transition: 1s ease-in-out;\r\n}\r\n\r\n.more-info {\r\n    opacity: 0;\r\n    transition: 1s ease-in-out;\r\n}\r\n\r\n.button {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    color: black;\r\n    padding: 4px;\r\n    border: 1px solid lightgray;\r\n    background-color: #95f9e3;\r\n    -webkit-border-radius: 8px;\r\n    -moz-border-radius: 8px;\r\n    border-radius: 8px;\r\n    transition: 0.2s ease-in-out;\r\n    margin: 5px;\r\n}\r\n\r\n.button:hover {\r\n    background-color: lightgreen;\r\n    transition: 0.2s ease-in-out;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}